<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>bendik.dev</title>
    <subtitle>Personal blog of Bendik Solheim.</subtitle>
    <link href="https://www.bendik.dev/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://www.bendik.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-01-28T00:00:00+00:00</updated>
    <id>https://www.bendik.dev/atom.xml</id>
    <entry xml:lang="en">
        <title>Spotpris Privacy Policy</title>
        <published>2023-01-28T00:00:00+00:00</published>
        <updated>2023-01-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/static/spotpris-privacy-policy/" type="text/html"/>
        <id>https://www.bendik.dev/static/spotpris-privacy-policy/</id>
        <content type="html">&lt;h1 id=&quot;spotpris-privacy-policy&quot;&gt;Spotpris Privacy Policy&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;utvikler&quot;&gt;Utvikler&lt;&#x2F;h2&gt;
&lt;p&gt;Spotpris er utviklet av Bendik Solheim (hello@bendik.dev)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hvilken-informasjon-samles-inn&quot;&gt;Hvilken informasjon samles inn?&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;personlig-informasjon&quot;&gt;Personlig informasjon&lt;&#x2F;h3&gt;
&lt;p&gt;Spotpris samler ikke inn noe personlig informasjon.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feillogger&quot;&gt;Feillogger&lt;&#x2F;h3&gt;
&lt;p&gt;Dersom du har godtatt å dele feillogger med utviklere vil eventuelle feil sendes til utvikleren av Spotpris.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;statistikk&quot;&gt;Statistikk&lt;&#x2F;h3&gt;
&lt;p&gt;Når Spotpris henter strømpriser sendes også versjonsnummeret av appen til serveren. Dette gjøres for å vite hvilke versjoner som er i bruk, slik at funksjonalitet som ikke lengre brukes kan fjernes.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>React – et hjertesukk</title>
        <published>2022-12-19T00:00:00+00:00</published>
        <updated>2022-12-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/react-et-hjertesukk/" type="text/html"/>
        <id>https://www.bendik.dev/posts/react-et-hjertesukk/</id>
        <content type="html">&lt;p&gt;&lt;em&gt;(This blog post is in norwegian, sorry about that)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ahh, React. Min gode venn gjennom mange år. Jeg skal være ærlig: forholdet vårt starta litt turbulent. Jeg var usikker på om det å blande HTML inn i Javascripten egentlig var noen god idé. Det tok faktisk et par år før du klarte å overbevise meg! Men du var heldigvis tålmodig. For det som starta som en skepsis viste seg å etter hvert til å bli til en aldri så liten forelskelse! Ohh boy!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Vi har nå vært close i mange år. Du har vært stødig og stabil, og enkel å forstå. Det har liksom aldri vært noe fuzz eller tull med deg! Jeg gir deg noe input, og du gir meg et ferdig view tilbake. Og når jeg endrer inputen, så gir du meg et nytt view. Et forutsigbart forhold tuftet på gjensidig respekt og forståelse!&lt;&#x2F;p&gt;
&lt;p&gt;Men de siste årene har du endret deg. En dag du kom sent hjem fra jobb var du helt i ekstase: du hadde møtt en ny venn ved navn Hooks, og følte deg helt hekta! Jeg var selvfølgelig nysgjerrig, interessert, og glad på dine vegne – noe annet skulle jo bare mangle. For en en god venn av deg måtte jo også være en like fornuftig type? … eller?&lt;&#x2F;p&gt;
&lt;p&gt;Hadde det bare vært så vel.. Du er liksom fortsatt React, men.. små, subtile, ting har endret seg. Reglene er ikke lengre de samme. Det som på overflaten ser ut som små, enkle, funksjoner viser seg å være komplekse beist som endrer oppførselen din fullstendig. Av og til til det helt uforståelige. Jeg kan ikke lengre stole på forutsigbarheten din, som er det jeg virkelig har verdsatt over alt ved deg. Det begynner også bli vanskelig å introdusere deg til nye venner. Det som tidligere var “Hei, hils på React! Gi ham noe input og få et view tilbake – gang på gang!” må nå etterfølges av masse hvis, men og husk på at. Det er plutselig en hel masse ekstra regler å forholde seg til. Regler som skiller seg veldig fra de andre reglene vi er vante med. Regler som ikke kan forklares uten dyp, dyp, kjennskap til hvordan React fungerer på innsiden. Regler som er vanskelige å forstå og huske på for ferske React-venner. Og det som kanskje er verst av alt: selv om Hooks er noen helt andre beist enn vanlige funksjoner, så prøver de så hardt de kan å framstå som akkurat det.&lt;&#x2F;p&gt;
&lt;p&gt;Ting er rett og slett ikke hva det en gang var. Jeg savner de glade og enkle dagene vi hadde sammen før 2018 – dagene før du hadde møtt denne nye vennen din som lever etter sine helt egne spilleregler.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>(Dis)Honest Functions</title>
        <published>2021-03-03T00:00:00+00:00</published>
        <updated>2021-03-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/honest-functions/" type="text/html"/>
        <id>https://www.bendik.dev/posts/honest-functions/</id>
        <content type="html">&lt;p&gt;After a recent debugging session, discovering I had once again been the victim of a dishonest function signature, I was... Well, let’s just say I was unimpressed. Two thoughts popped up in my head – the first one was «ahh.. this thing again..», and the second was «wait, why is this still even a thing?». It left me in a state of frustration.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The language was JavaScript, and the function was &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&#x2F;sort&quot;&gt;&lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Now, before we go on, let me just say that this is far from yet another JavaScript rant. Enough of those exists on the internet already. In fact, I don’t have a lot of problems with the language itself – this exact issue probably exists in most languages. I would like to say &lt;em&gt;all&lt;&#x2F;em&gt;, but I’m sure I would be proven wrong by someone on the internet.&lt;&#x2F;p&gt;
&lt;p&gt;But enough of that. As said, my problem was with &lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt;. It’s a sorting function. It sorts arrays. You give it an array and a comparator function, and get a sorted array back. Should be easy enough?&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;JavaScript&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-JavaScript &quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;sorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;unsorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; [0, 50, 99]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, if we glance past the comparator function (which I dislike, but that’s the story of another blog post), there’s not too much going on here. The TypeScript definition makes a lot of sense as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;TypeScript&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-TypeScript &quot;&gt;&lt;code class=&quot;language-TypeScript&quot; data-lang=&quot;TypeScript&quot;&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(compareFn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;?: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;number) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;): T[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;sort&lt;&#x2F;code&gt; is a function on &lt;code&gt;Array&lt;&#x2F;code&gt;s. We can even see that if we don’t supply a comparator function it should work anyway, as the return type says we always receive an array.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let’s alter our example just a bit&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;JavaScript&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-JavaScript &quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;sorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;unsorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;unsorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- this is the altered bit – we print the original array instead of the sorted one
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; [0, 50, 99]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wait a minute... What? Our unsorted array is now sorted, even though we never sorted it? Something weird is definitely going on here. Or, weird might be the wrong word – surprising and confusing are better alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;Once you read the documentation over at &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&#x2F;sort&quot;&gt;MDN&lt;&#x2F;a&gt; the surprise starts to make sense quickly. &lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt; actually sorts the array &lt;em&gt;in place&lt;&#x2F;em&gt;. It’s even there in the absolute &lt;em&gt;first sentence&lt;&#x2F;em&gt;. There are at least two conclusions we can draw from this fact&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript definitions cannot tell the whole truth of how functions should be used&lt;&#x2F;li&gt;
&lt;li&gt;It’s the first thing mentioned in the documentation – I am probably not the first one to make this mistake&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, errors like these annoys me. It makes my day a lot harder than what it needs to be. I like making things. I don’t like wasting time when it could have easily been avoided.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dishonest-functions&quot;&gt;Dishonest Functions&lt;&#x2F;h2&gt;
&lt;p&gt;It’s easy to put the blame on me as a developer. I should have read the documentation, there’s no denying that. But, what if... what if I didn’t have to read the full documentation to understand this single function?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt; is an example of what I like to call dishonest functions. Functions that for some reason likes to hide who they really are, and surprise you when you least expect it. A function signature acts as a promise (an &lt;em&gt;actual&lt;&#x2F;em&gt; promise, not the programming construct) – a promise from the writer of the function to me as a user that this function will behave in a certain way. When a function breaks that promise, it acts dishonestly. Our example with &lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt; is a bit sneaky, though. The type system can’t tell me whether our unsorted array is mutated in any way, so you could argue that it doesn’t break any promises. But there is a catch here – by returning an array, there is an implicit expectation that it leaves the input alone. No matter how hard I try, I can’t see any valid case where mixing these two behaviors makes sense.&lt;&#x2F;p&gt;
&lt;p&gt;My biggest problem with &lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt; is that there is no single best way of using it. The &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Array&#x2F;sort&quot;&gt;examples at MDN&lt;&#x2F;a&gt; seems to favor ignoring the return value. This works, but ignoring return values from functions is a code smell. Return values are there for a reason – ignoring them is just as bad as catching and swallowing exceptions. There are even linting rules to stop us from making such mistakes. But as we have seen, &lt;em&gt;not&lt;&#x2F;em&gt; ignoring the return value gives us another problem. In our first example, our array named &lt;code&gt;unsorted&lt;&#x2F;code&gt; is in fact &lt;em&gt;sorted&lt;&#x2F;em&gt;, so our code communicates the wrong thing. This is a sleeping bug just waiting to make your day really bad.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at a different example – this time from Kotlin&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Kotlin&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-Kotlin &quot;&gt;&lt;code class=&quot;language-Kotlin&quot; data-lang=&quot;Kotlin&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; String.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;toInt&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;Int
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A straight forward function signature. You have a String, you call &lt;code&gt;toInt&lt;&#x2F;code&gt;, you receive an &lt;code&gt;Int&lt;&#x2F;code&gt;. You might already have guessed where this is going – let’s see what happens if we do something completely unreasonable, such as calling it with something that is not a number.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Kotlin&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-Kotlin &quot;&gt;&lt;code class=&quot;language-Kotlin&quot; data-lang=&quot;Kotlin&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;myString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;not-a-number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span&gt;myNumber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; myString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;toInt()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; --&amp;gt; java.lang.NumberFormatException: For input string: &amp;quot;not-a-number&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oops! That’s not cool at all. You don’t want this in your production code. You might be thinking «yeah, as if I would ever do such a mistake...» right now, and I’m not here to argue with that. But what about your teammate who started programming professionally two months ago? Would they be able to catch these errors just as easy? I know &lt;em&gt;I&lt;&#x2F;em&gt; have done this mistake myself – several times.&lt;&#x2F;p&gt;
&lt;p&gt;The important part here is not the examples themselves, but rather that it’s impossible to know about these inconsistencies unless you have encountered them before, or happen to read the full documentation about every function that you use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;honest-functions&quot;&gt;Honest Functions&lt;&#x2F;h2&gt;
&lt;p&gt;Unlike dishonest functions, an honest function is, in lack of better words: honest. It tells you exactly how it behaves through its function signature, and possibly other, established norms. These norms might differ from language to language, but they should be consistent. In our world of honest functions, neither &lt;code&gt;Array.prototype.sort&lt;&#x2F;code&gt; or &lt;code&gt;String.toInt()&lt;&#x2F;code&gt; would exist in their current forms. They both hide their actual self, posing as something they’re not.&lt;&#x2F;p&gt;
&lt;p&gt;There are two important properties an honest function should honor: it has to be &lt;em&gt;pure&lt;&#x2F;em&gt;, and it has to be &lt;em&gt;total&lt;&#x2F;em&gt;. In essence, this means three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Given the same input (or same arguments, if you will), it should always produce the same output (or return value)&lt;&#x2F;li&gt;
&lt;li&gt;There should be no side effects.&lt;&#x2F;li&gt;
&lt;li&gt;The function has to be defined for all possible values of its input type(s)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If a function follows these three properties, there’s a good chance it is honest. Well, unless you intentionally name your function something completely unrelated to the implementation, but let’s try to keep our intentions good here. There is one problem, though. IO is a side effect, and not allowing IO is taking things a bit too far. Some languages have explicit constructs to indicate on a type level if a function needs to perform IO, but you don’t &lt;em&gt;need&lt;&#x2F;em&gt; this to have honest functions. If a function has to print or log something in addition to its main purpose, just name it accordingly! This won’t tick the &amp;quot;no side effects&amp;quot; checkbox, but I will argue that it makes your function honest.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functions-are-like-friends&quot;&gt;Functions are like friends&lt;&#x2F;h2&gt;
&lt;p&gt;Let me end this blog post with something that’s really cheesy, but that also somewhat works. I will compare functions to friendship. Yeah. Sorry about that.&lt;&#x2F;p&gt;
&lt;p&gt;Just like we all favor honest friends, we should also favor honest functions. We can most likely tolerate the odd lie here and there as long as it’s small and doesn’t affect us too much, but once the lies grows too big, it starts to have real consequences. Programming is really not too different. If anything, it might be even less forgiving. We can tolerate small amounts of inconsistencies, but too much and it hurts both your ablity to deliver, and ability to reason about your code.&lt;&#x2F;p&gt;
&lt;p&gt;There is no reason we should tolerate dishonest functions when a clear and honest alternative version could be just as easily be implemented. And just to be clear: it &lt;em&gt;always&lt;&#x2F;em&gt; can. Don’t lie to your friends – stay honest, peeps!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Java Version Management on macOS</title>
        <published>2021-01-30T00:00:00+00:00</published>
        <updated>2021-01-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/java-version-management-on-macos/" type="text/html"/>
        <id>https://www.bendik.dev/posts/java-version-management-on-macos/</id>
        <content type="html">&lt;p&gt;With the increased frequency of Java releases handling multiple versions on a single machine is more and more relevant. Solutions already exists, such as the widely used &lt;a href=&quot;https:&#x2F;&#x2F;www.jenv.be&quot;&gt;jenv&lt;&#x2F;a&gt; – my goto tool for a long time. For a number of reasons, I recently decided to throw it out of my system and build a solution myself. The result is a few small functions which handles most of my needs.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;em&gt;(Tldr; if you just want the code, &lt;a href=&quot;https:&#x2F;&#x2F;www.bendik.dev&#x2F;posts&#x2F;java-version-management-on-macos&#x2F;#a-solution&quot;&gt;just scroll down&lt;&#x2F;a&gt;)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;My biggest issue was the startup time on new shells. It’s a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jenv&#x2F;jenv&#x2F;issues&#x2F;148&quot;&gt;known issue&lt;&#x2F;a&gt;, with several workarounds, but at least to me they all affect my startup time noticably. Now, I might be an impatient guy, I’ll admit that, but I just can’t stand spending time on something that I feel should happen instantly.&lt;&#x2F;p&gt;
&lt;p&gt;My second biggest issue was the troubleshooting. I practically live in my terminal, so problems have a big effect on my productivity. For that reason (and others, I’m sure), I tend to like simple solutions. Fewer blows and whistles, fewer weird problems. Without going into too much detail, I feel that jenv has made a few weird decisions that has ended up with me spending precious time debugging and troublehooting. I am sure these decisions are made for good reasons, so no hard feelings there, but it aligns badly with my love for simplicity.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;So I implemented my own solution. Because as you know, the rational solution to spending too much time on a problem is spending even &lt;em&gt;more&lt;&#x2F;em&gt;. But hey, it resulted in me writing this blog post so I guess there’s that.&lt;&#x2F;p&gt;
&lt;p&gt;My needs are quite simple&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want the &lt;code&gt;java&lt;&#x2F;code&gt; command always available&lt;&#x2F;li&gt;
&lt;li&gt;I want the ability to switch, locally, between versions when needed&lt;&#x2F;li&gt;
&lt;li&gt;Bonus: automatically switching version when entering a folder would be cool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;.. and I believe that’s about it. New versions can easily be downloaded with Homebrew. Changing the version globally would be nice, but is not strictly neccesary.&lt;&#x2F;p&gt;
&lt;p&gt;Now, macOS comes with a little known commandline tool called &lt;code&gt;java_home&lt;&#x2F;code&gt;. It is located at &lt;code&gt;&#x2F;usr&#x2F;libexec&#x2F;java_home&lt;&#x2F;code&gt;, which is not on your &lt;code&gt;PATH&lt;&#x2F;code&gt; by default, so I guess it might be hard to find. Anyway, it knows Java. It knows your default version. It knows the other installed versions. But most importantly for us, you can hand it different filters and get a path to a valid Java home folder back.&lt;&#x2F;p&gt;
&lt;p&gt;Our solution is based around the &lt;code&gt;java_home&lt;&#x2F;code&gt; tool. Let’s see it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-solution&quot;&gt;A solution&lt;&#x2F;h2&gt;
&lt;p&gt;I keep this in my &lt;code&gt;.zshrc&lt;&#x2F;code&gt; file. I have &lt;em&gt;no&lt;&#x2F;em&gt; idea if this will work in Bash or some other shell – it’s untested in everything but Zsh. Sorry 🤷.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Extract version from release file in java folder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;_java_version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span&gt;version_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=$&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;version_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;&#x2F;release ]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;version_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;&#x2F;release &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;JAVA_VERSION=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;E &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;s&#x2F;JAVA_VERSION=|\&amp;quot;&#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;path
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# List current version with &amp;quot;jdk&amp;quot;, or change with &amp;quot;jdk 12&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;jdk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=${&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:-&amp;quot;&amp;quot;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span&gt;silent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=${&lt;&#x2F;span&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;version
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;JAVA_HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;&#x2F;usr&#x2F;libexec&#x2F;java_home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;silent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt; false ]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;version
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# List available versions, global version, and local version with &amp;quot;jdks&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;jdks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Java versions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;&#x2F;usr&#x2F;libexec&#x2F;java_home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;V 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sed 1d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;$d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;cut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;f1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Global: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;_java_version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;&#x2F;usr&#x2F;libexec&#x2F;java_home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;))&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;! -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;JAVA_HOME &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Local:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;_java_version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;JAVA_HOME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The usage is mostly there as a comment above each function, but to explain the workflow: list available versions on the system, along with current global and possibly local version with the command &lt;code&gt;jdks&lt;&#x2F;code&gt;. No arguments needed here. To list the active version in your current shell, use the command &lt;code&gt;jdk&lt;&#x2F;code&gt;. Use this last command together with a version number to change version locally: &lt;code&gt;jdk 1.8&lt;&#x2F;code&gt; gives you Java 1.8, &lt;code&gt;jdk 12&lt;&#x2F;code&gt; gives you Java 12. You don’t need to be completely specific, &lt;code&gt;jdk 1.8&lt;&#x2F;code&gt; chooses 1.8.0_265 on my system, even though 1.8.0_151 is installed as well. I’m not fluid on the heuristics here, but it mostly seems to behave.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus&quot;&gt;Bonus&lt;&#x2F;h2&gt;
&lt;p&gt;One thing I have added later on is loading a Java version from a &lt;code&gt;.java-version&lt;&#x2F;code&gt; file. With the snippet below, if I visit a folder with a &lt;code&gt;.java-version&lt;&#x2F;code&gt; file in it, the version is automatically changed. Could it be any easier? Yeah, I guess – it could check recursively, but I haven’t bothered yet. That sounds like it could also slow down my shell as it would happen on every directory change, so there might be a trade off here. As of now, this fills my needs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Put this in your .zshrc file as well
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Automatically change java version from .java-version file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;autoload&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt; add-zsh-hook
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;_jdk_autoload_hook&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt; .java-version ]]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;jdk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;cat .java-version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt; true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;add-zsh-hook chpwd _jdk_autoload_hook
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Functional TypeScript with fp-ts</title>
        <published>2020-12-12T00:00:00+00:00</published>
        <updated>2020-12-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/functional-ts-with-fp-ts/" type="text/html"/>
        <id>https://www.bendik.dev/posts/functional-ts-with-fp-ts/</id>
        <content type="html">&lt;p&gt;I have a confession to make.&lt;&#x2F;p&gt;
&lt;p&gt;I actually enjoy JavaScript.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;em&gt;(this was originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;www.bekk.christmas&#x2F;post&#x2F;2020&#x2F;12&#x2F;functional-typescript-with-fp-ts&quot;&gt;https:&#x2F;&#x2F;www.bekk.christmas&#x2F;post&#x2F;2020&#x2F;12&#x2F;functional-typescript-with-fp-ts&lt;&#x2F;a&gt;)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I know, I know, I’m not really supposed to feel this way. It’s supposed to be this weird language full of flaws that never follows established rules and conventions, and we’re all supposed to not like it. But that’s just not the case for me – despite all the quirks and unusual behavior I still enjoy it.&lt;&#x2F;p&gt;
&lt;p&gt;There are, of course, sides of it I enjoy less. The two things I dislike the most are lack of strong, static typing, and a well-built standard library. The standard library is still growing, and the newer parts of it are not too bad – the older parts, though, are all over the place: they mutate, and lack consistency.&lt;&#x2F;p&gt;
&lt;p&gt;Not too long ago I came across this library named fp-ts, that together with TypeScript made my whole JavaScript experience a lot better. This blog post aims to give you a short introduction to this library, and show you some of its strenghts. To keep this blog post short, I will assume you know both JavaScript and TypeScript. You will probably still understand most of it even if you are not fluid in any of them, but consider yourself warned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fp-ts&quot;&gt;fp-ts&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gcanti&#x2F;fp-ts&quot;&gt;fp-ts&lt;&#x2F;a&gt; introduces &lt;em&gt;many&lt;&#x2F;em&gt; functional concepts. If you come from Java or Kotlin, you can compare it to &lt;a href=&quot;https:&#x2F;&#x2F;www.vavr.io&#x2F;&quot;&gt;Vavr&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;arrow-kt.io&#x2F;&quot;&gt;Arrow&lt;&#x2F;a&gt;, respectively. It provides several well known data types, type classes, a consistent library of functions, and several other functional abstractions.&lt;&#x2F;p&gt;
&lt;p&gt;Wading through every feature of fp-ts would be an enourmous task, and one way too overkill for this blog. Instead, I will take you through some of the simpler concepts that anyone can benefit from. My goal is to show you exactly how to make use of some of these concepts, so you can take use of them right after.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s get started!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-data-types&quot;&gt;The data types&lt;&#x2F;h2&gt;
&lt;p&gt;Let’s start with two data types I use more or less daily: &lt;code&gt;Option&lt;&#x2F;code&gt; and &lt;code&gt;Either&lt;&#x2F;code&gt;. If you are completely new to functional programming, I suggest starting with these as they encourage a coding style that is safe, and can help you understand other aspects of functional programming later on.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;code&gt;Option&lt;&#x2F;code&gt; type represents an optional value. Something you either have, or don’t have. This is useful when lacking a value is valid in your domain, or when a function may or may not return a value. Let’s see some code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;fp-ts&#x2F;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;  id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  expiration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Date
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; { .. }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;userOne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; some({ id: 1, name: &amp;quot;user-name&amp;quot;, expiration: &amp;quot;2099-01-01T00:00:00Z&amp;quot; })
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;userTwo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; none
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;u&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;username
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameOne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(getUserName)(userOne) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; some(&amp;quot;user-name&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameTwo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(getUserName)(userTwo) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; none
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before we go through the code, I’d just like to point out the use of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Partial_application&quot;&gt;partial application&lt;&#x2F;a&gt; in the two last lines. Lots of functions in fp-ts are &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Currying&quot;&gt;curried&lt;&#x2F;a&gt; by default, as is often common in functional languages. This pattern is really convenient when you want to bind some, but not all, parameters of a function.&lt;&#x2F;p&gt;
&lt;p&gt;So, an &lt;code&gt;Option&lt;&#x2F;code&gt; wraps a value, and allows operations to be performed through functions such as &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;filter&lt;&#x2F;code&gt;, &lt;code&gt;fold&lt;&#x2F;code&gt; and others. This example demonstrates a really nice property of the &lt;code&gt;Optional&lt;&#x2F;code&gt;: your business code can describe the &amp;quot;happy path&amp;quot; – error handling is abstracted into the &lt;code&gt;Option&lt;&#x2F;code&gt; itself. We never have to check for &lt;code&gt;null&lt;&#x2F;code&gt; values before getting the username from the user, because the function &lt;code&gt;getUserName&lt;&#x2F;code&gt; is run in a safe context. &lt;code&gt;map&lt;&#x2F;code&gt; runs the provided function on an &lt;code&gt;Option&lt;&#x2F;code&gt; only if it is a &lt;code&gt;some&lt;&#x2F;code&gt;, and not a &lt;code&gt;none&lt;&#x2F;code&gt;. The same is true for other functions on the &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But what if you wanted to display, or use, the username? You can’t just extract the value from inside an &lt;code&gt;Option&lt;&#x2F;code&gt;, as you don’t know whether it is a &lt;code&gt;some&lt;&#x2F;code&gt; or a &lt;code&gt;none&lt;&#x2F;code&gt;. To get the actual value from the &lt;code&gt;Option&lt;&#x2F;code&gt;, you need to specify what to do both when it is a &lt;code&gt;none&lt;&#x2F;code&gt;, and a &lt;code&gt;some&lt;&#x2F;code&gt;. Let’s take a look at two safe ways of extracting your value from the &lt;code&gt;Option&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;fold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;getOrElse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;fp-ts&#x2F;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; Let’s calculate the length of the username
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameLength &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;fold&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;length
&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameOneLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;usernameLength&lt;&#x2F;span&gt;&lt;span&gt;(usernameOne)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 9
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameTwoLength&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;usernameLength&lt;&#x2F;span&gt;&lt;span&gt;(usernameTwo)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;getOrEmpty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getOrElse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameOneValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getOrEmpty&lt;&#x2F;span&gt;&lt;span&gt;(usernameOne)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; &amp;quot;user-name&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameTwoValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getOrEmpty&lt;&#x2F;span&gt;&lt;span&gt;(usernameTwo)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With both &lt;code&gt;fold&lt;&#x2F;code&gt; and &lt;code&gt;getOrElse&lt;&#x2F;code&gt;, the type system forces us to handle both the missing and the non-missing state. You now have a safe way of handling missing values, and even a safe way of getting them out as well – no more checking for &lt;code&gt;null&lt;&#x2F;code&gt; all over the place!&lt;&#x2F;p&gt;
&lt;p&gt;Let’s modify the function &lt;code&gt;getUserById&lt;&#x2F;code&gt; from the first example a bit. Instead of just returning a &lt;code&gt;none&lt;&#x2F;code&gt;, we would like to know &lt;em&gt;why&lt;&#x2F;em&gt; it was not returned. An &lt;code&gt;Option&lt;&#x2F;code&gt; can’t help you with this. Instead, you need something like the &lt;code&gt;Either&lt;&#x2F;code&gt;. Where an &lt;code&gt;Option&lt;&#x2F;code&gt; is either a &lt;code&gt;none&lt;&#x2F;code&gt; or a &lt;code&gt;some&lt;&#x2F;code&gt;, the &lt;code&gt;Either&lt;&#x2F;code&gt; is either a &lt;code&gt;left&lt;&#x2F;code&gt; or a &lt;code&gt;right&lt;&#x2F;code&gt;. It holds a value in both cases. The &lt;code&gt;Either&lt;&#x2F;code&gt; is often used to model situations where an operation can either fail or succeed. By convention, the &lt;code&gt;left&lt;&#x2F;code&gt; case represents the failure, and the &lt;code&gt;right&lt;&#x2F;code&gt; case represents success.&lt;&#x2F;p&gt;
&lt;p&gt;Aaaaaanyway. As stated, let’s change our &lt;code&gt;getUserById&lt;&#x2F;code&gt; function to also tell us why it was unsuccessful.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;fp-ts&#x2F;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;UserError &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;UserNotFound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot; | &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;UserExpired&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span&gt;Either&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;UserError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; { .. }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; Pretending that a user with ID 1 exists, but not with 2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;userOne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; right({id: 1, name: &amp;quot;user-name&amp;quot;, expiration: &amp;quot;2099-01-01TT00:00:00Z&amp;#39;})
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;userTwo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;getUserById&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; left(&amp;quot;UserNotFound&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameOne &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(getUserName)(userOne) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; right(&amp;quot;user-name&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;usernameTwo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(getUserName)(userTwo) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; left(&amp;quot;UserNotFound&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is not too far from the first example with the &lt;code&gt;Option&lt;&#x2F;code&gt;, with the added value that we now also know why it failed. It was either not found, or it was expired. Just as with the &lt;code&gt;Option&lt;&#x2F;code&gt;, &lt;code&gt;Either&lt;&#x2F;code&gt; is also a wrapper around your value(s), abstracting away the error case until you need the actual value. &lt;code&gt;Either&lt;&#x2F;code&gt; has its own version of &lt;code&gt;fold&lt;&#x2F;code&gt;, among others, which can be used to extract the value. I’ll leave you with the task of implementing this – if you need a hint, I can tell you it’s more or less the same as with &lt;code&gt;Option&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;So, which type should you use? It’s the usual, booring answer: it all the depends. It all depends on how the operation might fail, and what it would result in. It also boils down to semantics – is the lack of a value valid in your domain, or is it an error? In the former case, and &lt;code&gt;Option&lt;&#x2F;code&gt; is more suitable. In the latter, an &lt;code&gt;Either&lt;&#x2F;code&gt; might be better. As always: if you are unsure, just try one of them – you will soon find out if it was right or wrong.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pipes-and-flows&quot;&gt;Pipes and Flows&lt;&#x2F;h2&gt;
&lt;p&gt;Function composition is a central concept in functional programming. It is the act of combining simple functions to build more complicated ones. Smaller and simpler functions are easier to reason about and test, but can’t perform complex operations by themselves.&lt;&#x2F;p&gt;
&lt;p&gt;You could of course just call your simple functions in succession in a larger function. Either by saving the result of each step, or wrapping your functions inside each other. Both of these gets more and more tedious the more functions you need to call, and hides the important details: the actual logic and transformation. Let’s take a look at two functions called pipe and flow, which both make composition easier. They are quite alike, but have different use cases.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ts&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-ts &quot;&gt;&lt;code class=&quot;language-ts&quot; data-lang=&quot;ts&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;fp-ts&#x2F;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;square &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;timesTen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;timesTen)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 90
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;squareAndMultiply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;flow&lt;&#x2F;span&gt;&lt;span&gt;(square&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;timesTen)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;result2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;squareAndMultiply&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; -&amp;gt; 90
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;result&lt;&#x2F;code&gt; and &lt;code&gt;result2&lt;&#x2F;code&gt; have the same value, but are computed differently. &lt;code&gt;pipe&lt;&#x2F;code&gt; gives us the ability to pipe a value through a list of functions, and produce an output. This is nice for those one-off situations where you need to combine a few functions to produce a result. &lt;code&gt;flow&lt;&#x2F;code&gt; is more suited for those situations where you want to compose functions and create a new function permanently. In both cases, everything needs to typecheck – the input to one function needs to be of the same type as the output from the previous, all the way through.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extended-built-ins&quot;&gt;Extended built-ins&lt;&#x2F;h2&gt;
&lt;p&gt;As I said in the beginning of this post, JavaScripts standard library is in a bit of a weird position. If we take &lt;code&gt;Array&lt;&#x2F;code&gt; as an example, there is a distinction between functions that mutates in place, and functions that instead returns a new value. Things are moving to a better place, but we still have these old, mutating, functions that we have to live with. &lt;code&gt;fp-ts&lt;&#x2F;code&gt; fixes this by providing a consistent library even for JavaScript built-ins such as &lt;code&gt;Array&lt;&#x2F;code&gt; and &lt;code&gt;Map&lt;&#x2F;code&gt;. It’s not only consistent on the different types themselves, but also across the types thanks to extensive use of type classes &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Every class that adheres to the &lt;code&gt;Functor&lt;&#x2F;code&gt; type class supports the &lt;code&gt;map&lt;&#x2F;code&gt; function, and every class that adheres to the &lt;code&gt;Filterable&lt;&#x2F;code&gt; type class can be filtered and partitioned. If this is greek to you, just ignore the lingo and appreciate the fact that most types has &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;filter&lt;&#x2F;code&gt;, &lt;code&gt;reduce&lt;&#x2F;code&gt; and loads of other functions implemented on them. You can even implement them on types you create yourself as well!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-so-much-more&quot;&gt;... and so much more&lt;&#x2F;h2&gt;
&lt;p&gt;We have only really scratched the surface here. These concepts should give you enough to get you started, and hopefully see the value in this library. When you’re ready, there are tons of other concepts to dive into, which can make your code even more readable and safe. I haven’t had the time to wade through it all myself, so I still keep finding small gems which makes my day just a bit easier.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to know more, the &lt;a href=&quot;https:&#x2F;&#x2F;gcanti.github.io&#x2F;fp-ts&#x2F;learning-resources&#x2F;&quot;&gt;learning resources section&lt;&#x2F;a&gt; of the &lt;a href=&quot;https:&#x2F;&#x2F;gcanti.github.io&#x2F;fp-ts&#x2F;&quot;&gt;documentation&lt;&#x2F;a&gt; is actually quite good. As the author states, fp-ts does not really aim to teach functional programming from the ground up, but the resources are still good and manages to convince at least me quite well.&lt;&#x2F;p&gt;
&lt;p&gt;I also recommend reading the source code. It is surprisingly readable, even to me – a person who is neither fluent in advanced typescript or an FP zealot.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;em&gt;These are not «real» type classes, they are type classes implementet with interfaces. You can’t use the same &lt;code&gt;map&lt;&#x2F;code&gt; function on all &lt;code&gt;Functors&lt;&#x2F;code&gt;, but all &lt;code&gt;Functors&lt;&#x2F;code&gt; has a &lt;code&gt;map&lt;&#x2F;code&gt; function. You still need to use the type specific implementation of &lt;code&gt;map&lt;&#x2F;code&gt;, but at least it encourages the same pattern.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Characteristics of the Perfect Programming Language</title>
        <published>2020-12-02T00:00:00+00:00</published>
        <updated>2020-12-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/characteristics-of-the-perfect-programming-language/" type="text/html"/>
        <id>https://www.bendik.dev/posts/characteristics-of-the-perfect-programming-language/</id>
        <content type="html">&lt;p&gt;This is an opinionated post. Consider yourself warned. You will probably disagree with at least some of it, and that is completely fine. The important part is the thought process – don’t just read through it and agree or disagree, think about what you agree or disagree with and why. Becoming aware of these things is valuable: once you become aware of why you dislike something, you can start doing something about it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Over the years, I have noticed there is a small set of features I value more than others in programming languages. These features allow me to express myself in a concise and clear manner, makes my code more readable, and minimizes the amounts of errors I make. They are not &amp;quot;magical&amp;quot; in any way. Far from it. Rather, they are more.. fundamental aspects of the progamming language itself. Let’s dive in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expressive-type-system&quot;&gt;Expressive type system&lt;&#x2F;h2&gt;
&lt;p&gt;Types help me reason. Explicitly typed code communicates intent better, and is easier to navigate without losing context completely. Type systems comes in a variety of flavors, ranging from the most simple ones to more advanced systems with gradual typing, dependent types, type classes, and so on. Although I personally prefer more advanced ones, I believe this is more of a subjective topic. And of less importance, really. The main benefit of type systems exists in even the simplest ones: increased safety and readability. Remember: the compiler is your friend – the more it can verify, the better!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-inference&quot;&gt;Type inference&lt;&#x2F;h2&gt;
&lt;p&gt;I was a bit unsure if this point had its place in this blog post. On one hand, I feel its more of a convenience feature than strictly neccessary. On the other, an overly chatty and boilerplaty type system can cause more harm than good – if your business logic drowns in types, it’s too far in the wrong direction. Java, around the 1.5 era, is an example of this. In addition, type inference itself is a a double-egded sword. If the compiler inferes a different type than what you would have thought, it can be quite hard to spot where the actual error is. This is the reason some languages and communities define best practices around type inference, like being explicit in function signatures. Anyway. When I find that perfect spot between explicit types and inferred types, it just makes me really happy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;algebraic-data-types&quot;&gt;Algebraic data types&lt;&#x2F;h2&gt;
&lt;p&gt;I remember the first time I enountered sum types. My first response was «but.. Isn’t this just some kind of enums?». I can kind of see why I thought that, but I feel this is a limiting way of approaching them. Where enums helps me limit valid values, algebraic data types is so much more. It enables me to model my domain and state in a precise and correct manner, and makes illegal states «impossible». This didn’t really become clear to me until I went back to Java. I find modelling without them cumbersome and hard, and sometimes even end up in situations where I can’t avoid impossible states. Few things are more confusing than finding the comment «this can’t happen» in a branch of someones code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;first-class-functions&quot;&gt;First class functions&lt;&#x2F;h2&gt;
&lt;p&gt;I don’t even understand why this is subject to discussion anymore, but functions should be treated just like any other value &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; in a programming language. Returning functions and accepting functions as parameters is a fundamental feature to create abstractions and solve problems with composition. This just isn’t up for debate – I would take first class functions over any other feature any day of the week!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;functional-programming&quot;&gt;Functional programming&lt;&#x2F;h2&gt;
&lt;p&gt;Functional programming taught me to value these features. Sure, you will find imperative languages with these features as well, but they never feel like a core feature of the language. Even Java comes with some sort of primitive type inference these days, but it mostly feels tacked onto the language.&lt;&#x2F;p&gt;
&lt;p&gt;With some notable exceptions (looking at you, LISP), these are core features in all functional programming languages I use. They make my day better, so I would think hard before adopting a language without them these days.&lt;&#x2F;p&gt;
&lt;p&gt;Which feature do you miss or disagree with the most?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;em&gt;I use the term &amp;quot;value&amp;quot; loosely here. I don’t mean to debate value types, reference types, and pass by value or reference. Those are implementation details. The point is to see what advantages you get when a language treats simple values and functions the same.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Immutable by Default</title>
        <published>2019-12-03T00:00:00+00:00</published>
        <updated>2019-12-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://www.bendik.dev/posts/immutable-by-default/" type="text/html"/>
        <id>https://www.bendik.dev/posts/immutable-by-default/</id>
        <content type="html">&lt;p&gt;You should always strive to make, and make use of, immutable data structures. Even if your domain is inherently mutable (like most domains, really), there are quite a few pitfalls that can give you headaches later on if you also use mutable data structures. Many of them are avoidable simply by making it harder to accidentally modify data.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;(This was originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;www.bekk.christmas&#x2F;post&#x2F;2019&#x2F;3&#x2F;immutable-by-default&quot;&gt;https:&#x2F;&#x2F;www.bekk.christmas&#x2F;post&#x2F;2019&#x2F;3&#x2F;immutable-by-default&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;An immutable data structure is one that cannot change. Its values are set in stone. Once created, it is simply not possible to assign a new value to either the object itself, or one of its children. If this thought is completely new to you, it might sound quite strange and limiting. And you would not necessarily be wrong on the limiting part – a key point with immutability is actually to limit what can be done with an object. As it turns out, if you cannot change an object, many sources of bugs also disappears!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reasoning&quot;&gt;Reasoning&lt;&#x2F;h2&gt;
&lt;p&gt;Reasoning about programs can be quite hard. And when they grow in size, it becomes even harder. Our minds are limited, and can only keep so much information present at once. This is where immutability becomes quite a valuable tool: by limiting the possible interactions with objects, you no longer have to keep track of all the possible places an object might be mutated. Reasoning about your program is now more about understanding the general flow than keeping track of every tiny bit of your program.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-flow&quot;&gt;Data flow&lt;&#x2F;h2&gt;
&lt;p&gt;I don’t like surprises. Well, there are of course nice surprises, but when I program I like things to behave the way I expect them to. If I pass my data to a function to have some computation performed, I expect that function to play nice and don’t change my data in the process. But if my data structures are mutable, how can I be sure they don’t? Actually, there is nothing more than conventions to stop that from happening. If my data structures are immutable, change is prohibited by the compiler itself. Passing data around in your application is suddenly a completely safe operation, and you no longer have to worry about the implementation of every function you use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;&#x2F;h2&gt;
&lt;p&gt;Concurrency is a biggie nowadays, with home computers having more and more CPUS and threads available. Yeah, I know, this was also true 15 years ago. But I needed a way to start this paragraph, so just keep on reading. Concurrency is also inherently hard, as threads might need to synchronize, and sometimes even needs access to shared data to perform their operations. What would happen if you had two threads operating on the same, shared data structure – one reading from it while the other mutates it? Best case scenario, your program blows up and execution stops. Worst case, you end up with the wrong result and have no idea that something is seriously wrong. This is not a new problem – concurrency and all its issues has been discussed by computer scientists since at least the 1960s (&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Concurrency_(computer_science)&quot;&gt;Concurrenty (computer science)&lt;&#x2F;a&gt;. There are therefore also multiple ways to deal with concurrency, and prevent concurrency issues. The easiest though, at least in my opinion, is simply making your data structures immutable. When shared resources can’t change, threads can’t cause issues for each other as easily. Again, we have removed possible problems by limiting the number of possible operations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-what-about-the-real-world&quot;&gt;But what about the real world?&lt;&#x2F;h2&gt;
&lt;p&gt;As we can see, immutability gives us several desired properties when programming. We all want to get rid of bugs, and we all want to remove sources of confusion. At least I do. We want to spend more time solving the real problems, not the problems we created ourselves two weeks ago. I don’t know about you, but I can tell you that the list of bugs caused by my code is already seriously long, and if something can stop that list from growing at the speed of light I’m all in!&lt;&#x2F;p&gt;
&lt;p&gt;But just making things immutable does not solve the problems by itself. In real life, data change over time, and if our programs can’t do this it’s quite hard to solve real life problems with them. If I make software for cars, having an immutable speed dial does not exactly help the driver. &amp;quot;Yeah, I know it doesn’t change, but at least it doesn‘t crash your car!&amp;quot; – good luck selling your car on that premise. Luckily, immutable data structures also have ways of modelling changes. In fact, they often have quite similar APIs as mutable data structures, but with the key difference that they return a new copy with the change included rather than modifying the data in place. With our speed dial example, we would simply receive a new speed dial and swap out the old one when accelerating or braking instead of modifying the current one. Now, this might be where you start thinking &amp;quot;creating new copies all the time.. that sure sounds expensive.&amp;quot;. And I wouldn’t blame you for thinking like that, because naively implemented that might actually be true. But let me assure you that correctly implemented, this pattern is no more resource intensive than modifying in place.&lt;&#x2F;p&gt;
&lt;p&gt;Again, if this way of thinking is completely new to you, I can imagine you still might be a bit puzzled after reading this. If you are curious how one would actually structure code following an immutable pattern, I recommend picking up and learning a functional programming language. You might just get addicted.&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
